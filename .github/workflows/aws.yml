name: ECS Deployment Workflow

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    name: ECS Deployment Workflow
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true
          
      - name: Build Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: admintest
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker run --rm $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG sh -c 'echo "Validation successful"'
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          
      - name: Push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: admintest
          IMAGE_TAG: latest
        run: |
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "Image pushed to ECR"

      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: authtask.json
      #     container-name: authcontainer
      #     image: ${{ steps.build-image.outputs.image }}

      # - name: Stop running tasks
      #   run: |
      #     aws ecs update-service --cluster AdminBackendCluster --service Admin_Service --desired-count 0
      #     while [[ $(aws ecs describe-services --cluster AdminBackendCluster --services Admin_Service --query "services[0].runningCount") != "0" ]]; do
      #       echo "Waiting for running tasks to be stopped..."
      #       sleep 10
      #     done

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: Admin_Service
      #     cluster: AdminBackendCluster
      #     wait-for-service-stability: true
